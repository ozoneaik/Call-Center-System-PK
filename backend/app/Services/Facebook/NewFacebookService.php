<?php

namespace App\Services\Facebook;

use App\Models\Customers;
use App\Models\PlatformAccessTokens;
use Illuminate\Database\Eloquent\Casts\Json;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class NewFacebookService
{
    protected string $graphApiVersion = 'v19.0';

    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Facebook
     */
    public function newGetSenderProfile(string $senderId, string $accessToken, string $recipientId): array
    {
        Log::info('üì• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ' . $senderId);

        $url = "https://graph.facebook.com/{$this->graphApiVersion}/{$senderId}";

        $response = Http::get($url, [
            'fields' => 'first_name,last_name,name,profile_pic',
            'access_token' => $accessToken,
        ]);

        if ($response->successful()) {
            $profile = $response->json();
            $this->formatProfile($profile);
            Log::info('‚úÖ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ' . json_encode($profile, JSON_UNESCAPED_UNICODE));
            return $profile;
        }

        Log::warning("‚ö†Ô∏è ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö senderId: {$senderId} - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á");
        return $this->generateFakeProfile($senderId);
    }

    public function feedFacebook(string $pageId, string $accessToken)
    {
        Log::info("üì• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á feed ‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à: {$pageId}");

        try {
            $url = "https://graph.facebook.com/v23.0/{$pageId}/feed";
            // $fields = 'message';
            $limit = 5;
            $fields = 'post_id,message,created_time,full_picture,attachments,from{id,name},likes.summary(true),comments.summary(true),shares';

            $response = Http::get($url, [
                'access_token' => $accessToken,
                'fields' => $fields,
                'limit' => $limit,
            ]);

            if ($response->failed()) {
                Log::error("‚ùå ‡∏î‡∏∂‡∏á feed ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à {$pageId}", [
                    'error' => $response->json(),
                ]);
                return;
            }

            $feedData = $response->json()['data'] ?? [];

            if (empty($feedData)) {
                Log::warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏î ‡πÜ ‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à {$pageId}");
            }

            foreach ($feedData as $index => $post) {
            }
            return $feedData;
        } catch (\Exception $e) {
            Log::error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á feed ‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à {$pageId}", [
                'message' => $e->getMessage(),
                'line' => $e->getLine(),
            ]);
            return null;
        }
    }

    public function newFeedFacebook(string $pageId, string $accessToken, string $message = '', string $caption = '', array|string|null $imageInput = null)
    {
        Log::info("üì• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå Facebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏à: {$pageId}");

        if (empty($pageId)) {
            throw new \InvalidArgumentException('Page ID ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á');
        }

        if (empty($accessToken) || strlen($accessToken) < 50) {
            throw new \InvalidArgumentException('Access Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        }

        // ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ñ‡πâ‡∏≤ input ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
        $imageUrls = [];

        if (is_string($imageInput) && !empty($imageInput)) {
            $imageUrls = [$imageInput];
        } elseif (is_array($imageInput)) {
            $imageUrls = $imageInput;
        }

        // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, caption, ‡∏£‡∏π‡∏õ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏°‡∏î
        if (empty($message) && empty($caption) && empty($imageUrls)) {
            throw new \InvalidArgumentException('‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ message, caption ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
        }

        // ‚úÖ ‡πÄ‡∏Ñ‡∏™ 1: ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‚Üí ‡πÉ‡∏ä‡πâ attached_media
        if (count($imageUrls) > 1) {
            $mediaIds = [];
            foreach ($imageUrls as $url) {
                if (!filter_var($url, FILTER_VALIDATE_URL)) {
                    throw new \InvalidArgumentException("Image URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {$url}");
                }

                $upload = Http::post("https://graph.facebook.com/v23.0/{$pageId}/photos", [
                    'access_token' => $accessToken,
                    'url' => $url,
                    'published' => false,
                ]);

                if ($upload->failed()) {
                    Log::error('‚ùå Upload ‡∏£‡∏π‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', ['response' => $upload->json()]);
                    throw new \Exception('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' . $upload->body());
                }

                $mediaIds[] = ['media_fbid' => $upload->json()['id']];
            }

            $postData = [
                'access_token' => $accessToken,
                'message' => $message ?: $caption,
            ];

            foreach ($mediaIds as $index => $media) {
                $postData["attached_media[{$index}]"] = json_encode($media);
            }

            $response = Http::post("https://graph.facebook.com/v23.0/{$pageId}/feed", $postData);
        } elseif (count($imageUrls) === 1) {
            // ‚úÖ ‡πÄ‡∏Ñ‡∏™ 2: ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
            $response = Http::post("https://graph.facebook.com/v23.0/{$pageId}/photos", [
                'access_token' => $accessToken,
                'caption' => $caption ?: $message,
                'url' => $imageUrls[0],
            ]);
        } else {
            // ‚úÖ ‡πÄ‡∏Ñ‡∏™ 3: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏ß‡∏ô
            $response = Http::post("https://graph.facebook.com/v23.0/{$pageId}/feed", [
                'access_token' => $accessToken,
                'message' => $message,
            ]);
        }

        Log::info('üì§ Facebook ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ' . $response->body());

        if ($response->failed()) {
            Log::error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ', ['response' => $response->json()]);
            throw new \Exception('‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' . $response->body());
        }

        return $response->json();
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á (fallback)
     */
    protected function generateFakeProfile(string $senderId): array
    {
        $fakeProfile = [
            'id' => $senderId,
            'name' => "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤_{$senderId}",
            'first_name' => '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
            'last_name' => $senderId,
            'profile_pic' => null
        ];

        Log::info('üì• ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á: ' . json_encode($fakeProfile, JSON_UNESCAPED_UNICODE));
        return $fakeProfile;
    }

    /**
     * ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
     */
    public function newStoreCustomer(array $profile, $recipientId)
    {
        Log::info('üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ' . json_encode($profile, JSON_UNESCAPED_UNICODE));

        $realProfile = is_array($profile) && isset($profile[0]) ? $profile[0] : $profile;

        if (!isset($realProfile['id'])) {
            Log::error('storeCustomer: missing id in profile data');
            return null;
        }

        $customer = Customers::where('custId', $realProfile['id'])->first();

        if (!$customer) {
            // ‡∏´‡∏≤ platform ‡∏à‡∏≤‡∏Å fb_page_id
            $platform = PlatformAccessTokens::where('fb_page_id', $recipientId)->first();

            $platformId = $platform?->id ?? null;
            $platformDescription = $platform?->description ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏û‡∏à';

            Log::info("üì• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏à: {$recipientId}, platformRef: {$platformId}");

            $profile = Customers::create([
                'custId' => $realProfile['id'],
                'custName' => $realProfile['name'] ?? ($realProfile['first_name'] . ' ' . $realProfile['last_name']),
                'description' => "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏à‡∏≤‡∏Å Facebook " . $platformDescription,
                'avatar' => $realProfile['profile_pic'] ?? null,
                'platformRef' => $platformId
            ]);
        }

        return $profile;
    }

    public function formatProfile($profile)
    {
        // Log ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "test" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ function ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        Log::info("test");

        // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• $profile ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        Log::error($profile);

        // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ 'id' ‡∏à‡∏≤‡∏Å profile
        $custId = $profile['id'];

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Customers ‡∏ó‡∏µ‡πà‡∏°‡∏µ custId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö $custId
        $listProfile = Customers::where('custId', $custId)->first();

        // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡πÑ‡∏î‡πâ
        $listAccessToken = PlatformAccessTokens::where('id', $listProfile->platformRef)->first();



        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ return ‡∏Ñ‡πà‡∏≤‡πÉ‡∏î ‡πÜ
        return;
    }

    public function formatMessage($message)
    {
        $attachments = $message['message']['attachments'] ?? [];
        $senderId = $message['sender']['id'] ?? null;
        $recipientId = $message['recipient']['id'] ?? null;
        $textId = $message['message']['mid'] ?? null;

        $MESSAGE = [];

        Log::info("üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å webhook: " . json_encode($message, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));

        if (!empty($attachments)) {
            Log::info("üñºÔ∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: image");
            $imageUrls = [];

            foreach ($attachments as $index => $attachment) {
                $type = $attachment['type'] ?? 'unknown';
                $url = $attachment['payload']['url'] ?? null;

                $MESSAGE[$index]['content'] = $url;
                $MESSAGE[$index]['contentType'] = $type;
                $MESSAGE[$index]['facebook_message_id'] = $textId;
                
                Log::info("üñºÔ∏è Attachment #{$index}");
                Log::info("üëâ type: " . $type);
                Log::info("üëâ url: " . $url);

                if ($type === 'image' && $url) {
                    $imageUrls[] = $url;
                }
            }

            Log::info("üë§ sender_id: " . $senderId);
            Log::info("üì© recipient_id: " . $recipientId);
            Log::info("üÜî message_id (mid): " . $textId);

            return [
                'sender_id' => $senderId,
                'recipient_id' => $recipientId,
                'type' => 'image',
                'mid' => $textId,
                'payload' => $imageUrls,
            ];
        } else {
            $text = $message['message']['text'] ?? null;

            Log::info("‚úâÔ∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: text");
            Log::info("üë§ sender_id: " . $senderId);
            Log::info("üì© recipient_id: " . $recipientId);
            Log::info("üÜî message_id (mid): " . $textId);
            Log::info("üìù payload (text): " . $text);

            return [
                'sender_id' => $senderId,
                'recipient_id' => $recipientId,
                'type' => 'text',
                'mid' => $textId,
                'payload' => $text,
            ];
        }
    }

    public function getTokenFeed($id)
    {
        $token_list = PlatformAccessTokens::where('$id', $id)->first();
    }
}
