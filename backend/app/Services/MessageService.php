<?php

namespace App\Services;

use App\Models\Customers;
use App\Models\PlatformAccessTokens;
use Carbon\Carbon;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class MessageService
{
    // ‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
    public function differentTime($S, $T): string
    {
        try {
            $startTime = Carbon::parse($S);
            $endTime = Carbon::parse($T);
            $diffInSeconds = $startTime->diffInSeconds($endTime);
            $hours = floor($diffInSeconds / 3600);
            $minutes = floor(($diffInSeconds % 3600) / 60);
            $seconds = $diffInSeconds % 60;
            return "{$hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {$minutes} ‡∏ô‡∏≤‡∏ó‡∏µ {$seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ";
        } catch (\Exception $e) {
            return "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô";
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    public function sendMsgByLine($custId, $messages): array
    {
        try {
            $data['status'] = false;
            switch ($messages['contentType']) {
                case 'text':
                    $msg['type'] = 'text';
                    $msg['text'] = $messages['content'];
                    if (isset($messages['line_quote_token'])) {
                        $msg['quoteToken'] = $messages['line_quote_token'];
                    }
                    break;
                case 'image':
                    $msg['type'] = 'image';
                    $msg['originalContentUrl'] = $messages['content'];
                    $msg['previewImageUrl'] = $messages['content'];
                    break;
                case 'sticker':
                    $msg['type'] = 'image';
                    $msg['originalContentUrl'] = $messages['content'];
                    $msg['previewImageUrl'] = $messages['content'];
                    break;
                case 'video':
                    $msg['type'] = 'video';
                    $msg['originalContentUrl'] = $messages['content'];
                    $msg['previewImageUrl'] = $messages['content'];
                    break;
                case 'file':
                    $msg = [
                        'type' => 'template',
                        'altText' => 'This is a buttons template',
                        'template' => [
                            'type' => 'buttons', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'buttons' ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE API
                            'thumbnailImageUrl' => "https://images.pumpkin.tools/icon/pdf_icon.png",
                            'imageAspectRatio' => "rectangle",
                            'imageSize' => "cover",
                            'text' => "‡πÑ‡∏ü‡∏•‡πå.pdf", // title ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô template buttons
                            'actions' => [
                                [
                                    'type' => "uri",
                                    'label' => "‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå",
                                    'uri' => $messages['content'] ?? 'https://example.com/default.pdf' // ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ $messages['content'] ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
                                ]
                            ]
                        ]
                    ];
                    break;
                default:
                    throw new \Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å type [MessageService sendMsgByLine]');
            }
            $token = Customers::query()->leftJoin('platform_access_tokens as PAT', 'customers.platformRef', '=', 'PAT.id')
                ->where('custId', 'LIKE', $custId)
                ->select('PAT.accessToken')
                ->get();
            $accessToken = $token[0]->accessToken;
            $URL = 'https://api.line.me/v2/bot/message/push';
            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $accessToken
            ])->asJson()->post($URL, [
                'to' => $custId,
                'messages' => [$msg]
            ]);
            if ($response->status() == 200) {
                $data['status'] = true;
                $responseJson = $response->json();
                $responseJson = $responseJson['sentMessages'][0];
                $data['responseJson'] = $responseJson;
            } else {
                $data['status'] = false;
                $resJson = $response->json();
                $messageError = 'Line API PUSH MESSAGE => ' . $resJson['details'][0]['message'] ?? '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ Line API';
                throw new \Exception($messageError);
            }
            $data['message'] = $response->json() ?? 'test';
            Log::info('ERROR METHOD MESSAGE SERVICE >>> sendMsgByLine');
            Log::info($response->json());
        } catch (\Exception $e) {
            $data['status'] = false;
            Log::error($e->getMessage());
            $data['message'] = $e->getMessage();
        } finally {
            return $data;
        }
    }

    public function MsgEndTalk($custId, $rateId): array
    {

        try {
            $URL = 'https://api.line.me/v2/bot/message/push';
            $URL_RATING = env('APP_WEBHOOK_URL') . "/$custId/$rateId";
            $token = Customers::query()->leftJoin('platform_access_tokens as PAT', 'customers.platformRef', '=', 'PAT.id')
                ->where('custId', 'LIKE', $custId)
                ->select('PAT.accessToken')
                ->get();
            $accessToken = $token[0]->accessToken;

            $body = [
                "to" => $custId,
                "messages" => [
                    [
                        "type" => "text",
                        "text" => "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏£‡∏≤‡∏Ç‡∏≠‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ üôè",
                        "quickReply" => [
                            "items" => [
                                [
                                    "type" => "action",
                                    "action" => [
                                        "type" => "postback",
                                        "label" => "üëç ‡∏ñ‡∏π‡∏Å‡πÉ‡∏à",
                                        "data" => "like,$rateId",
                                        "displayText" => "‡∏ñ‡∏π‡∏Å‡πÉ‡∏à"
                                    ]
                                ],
                                [
                                    "type" => "action",
                                    "action" => [
                                        "type" => "postback",
                                        "label" => "üëé ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏à",
                                        "data" => "dislike,$rateId",
                                        "displayText" => "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏à"
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ];

            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $accessToken
            ])->asJson()->post($URL, $body);
            if ($response->status() == 200) {
                $data['status'] = true;
                $data['message'] = '‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
            } else {
                $message = $response->json();
                $message = collect($message)->get('details.0.message', '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ Line API');
                throw new \Exception('Line API ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î >>> ' . $message);
            }
        } catch (\Exception $e) {
            Log::channel('line_webhook_log')->error($e->getMessage());
            Log::channel('line_webhook_log')->error($e->getLine() . ' ' . $e->getFile());
            $data['status'] = false;
            $data['message'] = $e->getMessage();
        } finally {
            return $data;
        }
    }

    public function quickReplyMsgLine($rate, $replyToken)
    {
        $customer = Customers::query()->where('custId', $rate->custId)->first();
        $token = PlatformAccessTokens::query()->where('id', $customer->platformRef)->first();
        $accessToken = $token->accessToken;
        $URL = ''.env('FRONTEND_URL').'/feedback/'.$customer->custId.'/'.$rate->id;
        Log::error($URL);
        $message = [
            'replyToken' => $replyToken,
            'messages' => [[
                'type' => 'flex',
                'altText' => 'Quick Reply',
                'contents' => [
                    'type' => 'bubble',
                    'body' => [
                        'type' => 'box',
                        'layout' => 'vertical',
                        'spacing' => 'md',
                        'contents' => [
                            [
                                'type' => 'text',
                                'text' => '‡∏ö‡∏à‡∏Å. ‡∏û‡∏±‡∏°‡∏Ñ‡∏¥‡∏ô ‡∏Ñ‡∏≠‡∏£‡πå‡∏õ‡∏≠‡πÄ‡∏£‡∏ä‡∏±‡πà‡∏ô',
                                'weight' => 'bold',
                                'size' => 'lg',
                            ],
                            [
                                'type' => 'text',
                                'text' => '‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤',
                                'color' => '#FF9826FF',
                                'wrap' => true,
                            ]
                        ]
                    ],
                    'footer' => [
                        'type' => 'box',
                        'layout' => 'vertical',
                        'contents' => [
                            ['type' => 'spacer'],
                            [
                                'type' => 'button',
                                'action' => [
                                    'type' => 'uri',
                                    'label' => 'üìÑ‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
                                    'uri' => $URL,
                                ],
                                'color' => '#F15823FF',
                                'style' => 'primary'
                            ]
                        ]
                    ]
                ]
            ]]
        ];
        try {
            $response = Http::withHeaders(['Authorization' => 'Bearer ' . $accessToken])
                ->post('https://api.line.me/v2/bot/message/reply', $message);
            if ($response->status() == 200) {
                $responssJson = $response->json();
                Log::error('Line Success ‚úÖ‚úÖ');
            } else {
                $responssJson = $response->json();
                Log::error('Line Error ‚ùå‚ùå', [
                    'error' => $responssJson,
                ]);
            }
        } catch (\Exception $e) {
            Log::error('LineAiController', [
                'error' => $e->getMessage(),
            ]);
        }
    }
}
